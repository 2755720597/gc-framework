package com.allen.pattern.composite.open;

import lombok.extern.slf4j.Slf4j;

/**
 * @ClassName OpenTest
 * @Description TODO
 *
 * 1.优点
 * 高层模块调用简单。局部和整体对调用者来说没有任何区别，也就是说，高层模块不必关心自己处理的是单个对象还是整个组合结构，简化了高层模块的代码。
 * 节点自由增加。使用了组合模式后，我们可以看看，如果想增加一个树枝节点、树叶节点十分简单，只要找到它的父节点就成，非常容易扩展，符合开闭原则，对以后的维护非常有利。
 * 2.缺点
 * 组合模式有一个非常明显的缺点，在上面的场景类可以看到树枝树叶直接使用了实现类，这在面向接口编程上是很不恰当的，与依赖倒置原则冲突，它限制了你接口的影响范围。
 *
 *
 *
 * @Author Xu
 * @Date 2019/3/27 9:52
 **/
@Slf4j
public class OpenTest {

    public static void main(String[] args){
        Composite root = new Composite();

        Composite branch = new Composite();

        Leaf leaf = new Leaf();

        // 建立整体
        root.add(branch);
        branch.add(leaf);

        showTree(root);
    }

    public static void showTree(Component root){
        for (Component item : root.getChirldren()){
            if (item instanceof Leaf){
                log.info("是叶子节点类型，现在正在执行");
            } else {
                log.info("是构件类型，现在正在构件节点");
                showTree(item);
            }
        }
    }

}
